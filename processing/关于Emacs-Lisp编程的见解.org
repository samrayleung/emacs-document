#+TITLE: 关于 Emacs-Lisp 编程的见解
#+URL: http://www.nongnu.org/emacs-tiny-tools/elisp-coding/index-body.html                                  
#+AUTHOR: Samray
#+CATEGORY: elisp-common
#+DATE: 
#+OPTIONS: ^:{}
--------------------------------------------------------------------------------------------------------------
* 1.0 Document id
  Copyright © 1995-2007 Jari Aalto

  License: This material may be distributed only subject to the terms and
  conditions set forth in GNU General Public License v2 or later; or, at your
  option, distributed under the terms of GNU Free Documentation License version
  1.2 or later (GNU FDL).

  本文档包含了关于 Unix Emacs Lisp 编程的信息。它发表了关于 Emacs lisp 编程的风格
  指南以及展示了关于 Emacs lisp编译器的信息。而本文档关于 Emacs-lisp 的代码剖析都
  是经过笔者亲自实践过的，而其中一部分代码的运行结果也会展示出来。
** 1.1 What this document is not
   本文档不会向你介绍 lisp, 在阅读本文档之前你需要了解基本的 lisp 知识，例如：函
   数，局部变量，全局变量以及在 lisp 中使用的各种列表。总而言之，本文不会为你提
   供解决特定问题的函数或者是具体的解决方案。不过还是会有一些学习案例的。
** 1.2 What is this document?
   本文包含着一些你可能觉得很方便的指南。这些指南可能是在 Emacs 用户组或者新闻列
   表上发布过的好的文章或者是你未曾品读过的好文章，无论如何，都希望你会喜爱它们。
   建议你在阅读本文之前，先去阅读一些那些优美的 lisp 编程指南。
   
   本文包含的是对编程的最佳实践的一些指导建议，但是它不是你一定要遵守的 "戒律
   ". 你可以择善而从，不喜则无视之。
   
   而 Elp (lisp profiling tool-lisp 分析工具)可能适用于那些很谨慎的读者，特别是
   它们需要指南来编写紧湊的循环，用时少的函数。不过通常在 Emacs 里面这些都是不需
   要进行优化的：因为你很少会遇上性能问题。不过你不应该盲目相信这些代码的运行结
   果，要持"批判的"态度去阅读它们。
   
   习惯的缩写：
   [jari] Jari Aalto
   [kai] Kai Grossjohann
   [vladimir] Vladimir Alexiev
* 2.0 The basic coding suggestions
** Major rule1 - comment as much as possible
   当别人在阅读你的代码的时候，会为你添加的额外的解释而对你心存感激的。可能有一
   天，你的这些代码由另外一个程序员来维护. 所以你要谨记，当你不再为这些代码工作
   的时候，需要新的维护者来接管你的代码，而你的代码就代表着你自己，所以，还是尽
   量地让别人了解你吧。
** Majro rule2 - maintenance comes first
   可维护性和可读性应该优先考虑，所以不要编写过于紧湊简短的代码。如果你的代码是"
   简洁"的，你的方法就很容易阅读。无论你如何紧缩你的代码，你的代码都不会跑得更快，
   但是却更有可能丧失可读性。有些人喜欢把他们的函数里面所有的空格删掉，这样他们
   的代码就可以"缩"成一行了，但是这些都并不是最佳实践。
   
   把相互关联的部分以组的形式组织起来，并在有重要事情发生的地方 (例如函数或者使
   条件判断)添加上破折号或者其他容易被注意到的符号
** Majro rule3 - don't spare variables
   不要害怕使用很多变量，特别是在需要局部变量的函数里面。如果一个变量可以命名得
   合适，那么它本身就能解释代码的作用。使用 XEmacs 字节码编译器来检查一下你是否
   有定义过但未曾使用的变量，这样编译的结果就可以更加整洁 (需要注意：XEmacs 的字
   节码编译器可以比 Emacs 字节码编译器更好地捕捉编程错误)
   
   在大多数情况下，使用过多变量所导致的副作用都是可以忽略的。留意本文接下来的分
   析结果。
